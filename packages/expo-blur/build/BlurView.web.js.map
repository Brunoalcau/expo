{"version":3,"file":"BlurView.web.js","sourceRoot":"","sources":["../src/BlurView.web.tsx"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,YAAY,CAAC;AACnC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAG/D,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,SAAS,eAAe;IACtB,gEAAgE;IAChE,yFAAyF;IACzF,iDAAiD;IACjD,OAAO,CACL,GAAG,CAAC,QAAQ,CAAC,yBAAyB,EAAE,WAAW,CAAC;QACpD,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAC7C,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE;IACvC,IAAI,eAAe,EAAE,EAAE;QACrB,IAAI,MAAM,GAAG,QAAQ,SAAS,KAAK,CAAC;QACpC,IAAI,IAAI,KAAK,MAAM,EAAE;YACnB,MAAM,IAAI,kBAAkB,CAAC;SAC9B;aAAM,IAAI,IAAI,KAAK,OAAO,EAAE;YAC3B,MAAM,IAAI,mBAAmB,CAAC;SAC/B;QAED,OAAO;YACL,aAAa;YACb,iBAAiB,EAAE,MAAM;YACzB,yBAAyB,EAAE,MAAM;SAClC,CAAC;KACH;SAAM;QACL,IAAI,eAAe,GAAG,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC1D,OAAO,EAAE,eAAe,EAAE,CAAC;KAC5B;AACH,CAAC;AACD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,KAAK,CAAC,SAAgB;IAA5D;;QAWE,iBAAY,GAAG,GAAG,EAAE;YAClB,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAEvC,IAAI,eAAe,EAAE,EAAE;gBACrB,IAAI,cAAc,GAAG,QAAQ,SAAS,KAAK,CAAC;gBAC5C,IAAI,IAAI,KAAK,MAAM,EAAE;oBACnB,cAAc,IAAI,kBAAkB,CAAC;iBACtC;qBAAM,IAAI,IAAI,KAAK,OAAO,EAAE;oBAC3B,cAAc,IAAI,mBAAmB,CAAC;iBACvC;gBACD,OAAO;oBACL,cAAc;iBACf,CAAC;aACH;iBAAM;gBACL,IAAI,eAAe,GAAG,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBAC1D,OAAO,EAAE,eAAe,EAAE,CAAC;aAC5B;QACH,CAAC,CAAC;IASJ,CAAC;IAPC,MAAM;QACJ,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAE3D,MAAM,SAAS,GAAG,YAAY,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAEpD,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,EAAG,CAAC;IAC5E,CAAC;;AAnCM,kBAAS,GAAG;IACjB,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IACnD,GAAG,aAAa;CACjB,CAAC;AAEK,qBAAY,GAAG;IACpB,IAAI,EAAE,SAAqB;IAC3B,SAAS,EAAE,EAAE;CACd,CAAC","sourcesContent":["import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { StyleSheet, View, ViewPropTypes } from 'react-native';\n\nimport { BlurTint, Props } from './BlurView.types';\nimport getBackgroundColor from './getBackgroundColor';\n\nfunction isBlurSupported(): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility\n  // TODO: Bacon: Chrome blur seems broken natively\n  return (\n    CSS.supports('-webkit-backdrop-filter', 'blur(1px)') ||\n    CSS.supports('backdrop-filter', 'blur(1px)')\n  );\n}\n\nfunction getBlurStyle({ intensity, tint }): { [key: string]: string } {\n  if (isBlurSupported()) {\n    let filter = `blur(${intensity}px)`;\n    if (tint === 'dark') {\n      filter += ' brightness(50%)';\n    } else if (tint === 'light') {\n      filter += ' brightness(150%)';\n    }\n\n    return {\n      // @ts-ignore\n      'backdrop-filter': filter,\n      '-webkit-backdrop-filter': filter,\n    };\n  } else {\n    let backgroundColor = getBackgroundColor(intensity, tint);\n    return { backgroundColor };\n  }\n}\nexport default class BlurView extends React.Component<Props> {\n  static propTypes = {\n    tint: PropTypes.oneOf(['light', 'default', 'dark']),\n    ...ViewPropTypes,\n  };\n\n  static defaultProps = {\n    tint: 'default' as BlurTint,\n    intensity: 50,\n  };\n\n  getBlurStyle = () => {\n    const { tint, intensity } = this.props;\n\n    if (isBlurSupported()) {\n      let backdropFilter = `blur(${intensity}px)`;\n      if (tint === 'dark') {\n        backdropFilter += ' brightness(50%)';\n      } else if (tint === 'light') {\n        backdropFilter += ' brightness(150%)';\n      }\n      return {\n        backdropFilter,\n      };\n    } else {\n      let backgroundColor = getBackgroundColor(intensity, tint);\n      return { backgroundColor };\n    }\n  };\n\n  render() {\n    let { tint, intensity, style = {}, ...props } = this.props;\n\n    const blurStyle = getBlurStyle({ tint, intensity });\n\n    return <View {...props} style={StyleSheet.flatten([style, blurStyle])} />;\n  }\n}\n"]}